// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// expprobPL
double expprobPL(NumericMatrix x, NumericMatrix sigma, NumericVector mu, int v_ind, int q_ind);
RcppExport SEXP _plising_expprobPL(SEXP xSEXP, SEXP sigmaSEXP, SEXP muSEXP, SEXP v_indSEXP, SEXP q_indSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< int >::type v_ind(v_indSEXP);
    Rcpp::traits::input_parameter< int >::type q_ind(q_indSEXP);
    rcpp_result_gen = Rcpp::wrap(expprobPL(x, sigma, mu, v_ind, q_ind));
    return rcpp_result_gen;
END_RCPP
}
// sumSigma
double sumSigma(NumericMatrix sigma, NumericMatrix x, int index, int v);
RcppExport SEXP _plising_sumSigma(SEXP sigmaSEXP, SEXP xSEXP, SEXP indexSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type index(indexSEXP);
    Rcpp::traits::input_parameter< int >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(sumSigma(sigma, x, index, v));
    return rcpp_result_gen;
END_RCPP
}
// derivativeHelp
NumericMatrix derivativeHelp(NumericMatrix x, NumericVector mu, NumericMatrix sigma);
RcppExport SEXP _plising_derivativeHelp(SEXP xSEXP, SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(derivativeHelp(x, mu, sigma));
    return rcpp_result_gen;
END_RCPP
}
// mapSigmaIndex
int mapSigmaIndex(int index1, int index2, int p);
RcppExport SEXP _plising_mapSigmaIndex(SEXP index1SEXP, SEXP index2SEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type index1(index1SEXP);
    Rcpp::traits::input_parameter< int >::type index2(index2SEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(mapSigmaIndex(index1, index2, p));
    return rcpp_result_gen;
END_RCPP
}
// symmetrizeLR
NumericMatrix symmetrizeLR(NumericMatrix theta);
RcppExport SEXP _plising_symmetrizeLR(SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(symmetrizeLR(theta));
    return rcpp_result_gen;
END_RCPP
}
// bootstrapVariances
NumericVector bootstrapVariances(IntegerMatrix data, Function func, Function sampler, Function removemissing);
RcppExport SEXP _plising_bootstrapVariances(SEXP dataSEXP, SEXP funcSEXP, SEXP samplerSEXP, SEXP removemissingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< Function >::type func(funcSEXP);
    Rcpp::traits::input_parameter< Function >::type sampler(samplerSEXP);
    Rcpp::traits::input_parameter< Function >::type removemissing(removemissingSEXP);
    rcpp_result_gen = Rcpp::wrap(bootstrapVariances(data, func, sampler, removemissing));
    return rcpp_result_gen;
END_RCPP
}
// symmetrizeMatrix
NumericMatrix symmetrizeMatrix(NumericMatrix theta);
RcppExport SEXP _plising_symmetrizeMatrix(SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(symmetrizeMatrix(theta));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_plising_expprobPL", (DL_FUNC) &_plising_expprobPL, 5},
    {"_plising_sumSigma", (DL_FUNC) &_plising_sumSigma, 4},
    {"_plising_derivativeHelp", (DL_FUNC) &_plising_derivativeHelp, 3},
    {"_plising_mapSigmaIndex", (DL_FUNC) &_plising_mapSigmaIndex, 3},
    {"_plising_symmetrizeLR", (DL_FUNC) &_plising_symmetrizeLR, 1},
    {"_plising_bootstrapVariances", (DL_FUNC) &_plising_bootstrapVariances, 4},
    {"_plising_symmetrizeMatrix", (DL_FUNC) &_plising_symmetrizeMatrix, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_plising(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}

// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// normalizingConstant
double normalizingConstant(NumericVector theta, NumericVector Esuf, NumericMatrix Ess, double Z, NumericVector y);
RcppExport SEXP _plising_normalizingConstant(SEXP thetaSEXP, SEXP EsufSEXP, SEXP EssSEXP, SEXP ZSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Esuf(EsufSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Ess(EssSEXP);
    Rcpp::traits::input_parameter< double >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(normalizingConstant(theta, Esuf, Ess, Z, y));
    return rcpp_result_gen;
END_RCPP
}
// symmetrizeMatrix
NumericMatrix symmetrizeMatrix(NumericMatrix theta);
RcppExport SEXP _plising_symmetrizeMatrix(SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(symmetrizeMatrix(theta));
    return rcpp_result_gen;
END_RCPP
}
// hessenNorm
double hessenNorm(NumericVector thetaH, NumericVector EsufH, NumericMatrix EssH, double ZH, IntegerMatrix yH);
RcppExport SEXP _plising_hessenNorm(SEXP thetaHSEXP, SEXP EsufHSEXP, SEXP EssHSEXP, SEXP ZHSEXP, SEXP yHSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type thetaH(thetaHSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type EsufH(EsufHSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type EssH(EssHSEXP);
    Rcpp::traits::input_parameter< double >::type ZH(ZHSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type yH(yHSEXP);
    rcpp_result_gen = Rcpp::wrap(hessenNorm(thetaH, EsufH, EssH, ZH, yH));
    return rcpp_result_gen;
END_RCPP
}
// sumSigma
double sumSigma(NumericMatrix sigma, NumericMatrix x, int index, int v);
RcppExport SEXP _plising_sumSigma(SEXP sigmaSEXP, SEXP xSEXP, SEXP indexSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type index(indexSEXP);
    Rcpp::traits::input_parameter< int >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(sumSigma(sigma, x, index, v));
    return rcpp_result_gen;
END_RCPP
}
// derivativeHelp
NumericMatrix derivativeHelp(NumericMatrix x, NumericVector mu, NumericMatrix sigma);
RcppExport SEXP _plising_derivativeHelp(SEXP xSEXP, SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(derivativeHelp(x, mu, sigma));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_plising_normalizingConstant", (DL_FUNC) &_plising_normalizingConstant, 5},
    {"_plising_symmetrizeMatrix", (DL_FUNC) &_plising_symmetrizeMatrix, 1},
    {"_plising_hessenNorm", (DL_FUNC) &_plising_hessenNorm, 5},
    {"_plising_sumSigma", (DL_FUNC) &_plising_sumSigma, 4},
    {"_plising_derivativeHelp", (DL_FUNC) &_plising_derivativeHelp, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_plising(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
